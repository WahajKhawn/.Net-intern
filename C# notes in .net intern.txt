What is the difference between namespace and class?
The namespace and classes are two different concepts. 
Classes are datatypes. Classes are basically extended version of structures. Classes can contain data members and functions 
as members, but namespaces can contain variables and functions by grouping them into one.
-----------------------------------------------------------------------------------------------------------------------------

OOP:
public keyword? It is called an access modifier, which specifies that the color variable/field of Car is accessible 
for other classes as well, such as Program.
-----------------------------------------------------------------------------------------------------------------------------

Constructor:
Note that the constructor name must match the class name, and it cannot have a return type (like void or int).
Also note that the constructor is called when the object is created.
All classes have constructors by default: if you do not create a class constructor yourself, C# creates one for you. 
However, then you are not able to set initial values for fields.
-----------------------------------------------------------------------------------------------------------------------------

public=>   The code is accessible for all classes
private=>  The code is only accessible within the same class
protected=>The code is accessible within the same class, or in a class that is inherited from that class.
internal=> The code is only accessible within its own assembly, but not from another assembly.
-----------------------------------------------------------------------------------------------------------------------------

Encapsulation=> 
The meaning of Encapsulation, is to make sure that "sensitive" data is hidden from users. To achieve this, you must:

declare fields/variables as private
provide public get and set methods, through properties, to access and update the value of a private field

Why Encapsulation?
Better control of class members (reduce the possibility of yourself (or others) to mess up the code)
Fields can be made read-only (if you only use the get method), or write-only (if you only use the set method)
Flexible: the programmer can change one part of the code without affecting other parts
Increased security of data
-----------------------------------------------------------------------------------------------------------------------------

Polymorphism and Overriding Methods:
Polymorphism means "many forms", and it occurs when we have many classes that are related to each other by inheritance.
Like we specified in the previous chapter; Inheritance lets us inherit fields and methods from another class. Polymorphism 
uses those methods to perform different tasks. This allows us to perform a single action in different ways.

-----------------------------------------------------------------------------------------------------------------------------
Abstract Classes and Methods
Data abstraction is the process of hiding certain details and showing only essential information to the user.
Abstraction can be achieved with either abstract classes or interfaces.

The abstract keyword is used for classes and methods:

Abstract class: is a restricted class that cannot be used to create objects 
(to access it, it must be inherited from another class).

Abstract method: can only be used in an abstract class, and it does not have a body. 
The body is provided by the derived class (inherited from).
-----------------------------------------------------------------------------------------------------------------------------
Interfaces
Another way to achieve abstraction in C#, is with interfaces.

An interface is a completely "abstract class", which can only contain abstract methods and properties (with empty bodies):
// interface
interface Animal 
{
  void animalSound(); // interface method (does not have a body)
  void run(); // interface method (does not have a body)
}

To implement multiple interfaces, separate them with a comma:
interface IFirstInterface 
{
  void myMethod(); // interface method
}

interface ISecondInterface 
{
  void myOtherMethod(); // interface method
}

// Implement multiple interfaces
class DemoClass : IFirstInterface, ISecondInterface 
-----------------------------------------------------------------------------------------------------------------------------
Working With Files
The File class from the System.IO namespace, allows us to work with files:
Eg:
using System.IO;  // include the System.IO namespace

File.SomeFileMethod();  // use the file class with methods
The File class has many useful methods for creating and getting information about files. For example:

Method		Description	
AppendText()	Appends text at the end of an existing file
Copy()		Copies a file
Create()	Creates or overwrites a file
Delete()	Deletes a file
Exists()	Tests whether the file exists
ReadAllText()	Reads the contents of a file
Replace()	Replaces the contents of a file with the contents of another file
WriteAllText()	Creates a new file and writes the contents to it. If the file already exists, it will be overwritten.
-----------------------------------------------------------------------------------------------------------------------
Write To a File and Read It
In the following example, we use the WriteAllText() method to create a file named "filename.txt" and write some 
content to it. Then we use the ReadAllText() method to read the contents of the file:
Eg:
string writeText = "Hello World!";  // Create a text string
File.WriteAllText("filename.txt", writeText);  // Create a file and write the content of writeText to it

string readText = File.ReadAllText("filename.txt");  // Read the contents of the file
Console.WriteLine(readText);  // Output the content

------------------------------------------------------------------------------------------------------------------------
C# try and catch
The try statement allows you to define a block of code to be tested for errors while it is being executed.
The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.

The try and catch keywords come in pairs:
try
{
  int[] myNumbers = {1, 2, 3};
  Console.WriteLine(myNumbers[10]);
}
catch (Exception e)
{
  Console.WriteLine(e.Message);
}
The output will be:

Index was outside the bounds of the array.

-------------------------------------------------------------------------------------------------------------------------
The finally statement lets you execute code, after try...catch, regardless of the result:
try
{
  int[] myNumbers = {1, 2, 3};
  Console.WriteLine(myNumbers[10]);
}
catch (Exception e)
{
  Console.WriteLine("Something went wrong.");
}
finally
{
  Console.WriteLine("The 'try catch' is finished.");
}
The output will be:

Something went wrong.
The 'try catch' is finished.

-------------------------------------------------------------------------------------------------------------------------
The throw statement allows you to create a custom error.

The throw statement is used together with an exception class. There are many exception classes 
available in C#: ArithmeticException, FileNotFoundException, IndexOutOfRangeException, TimeOutException, etc:

static void checkAge(int age)
{
  if (age < 18)
  {
    throw new ArithmeticException("Access denied - You must be at least 18 years old.");
  }
  else
  {
    Console.WriteLine("Access granted - You are old enough!");
  }
}

static void Main(string[] args)
{
  checkAge(15);
}
The error message displayed in the program will be:

System.ArithmeticException: 'Access denied - You must be at least 18 years old.'
------------------------------------------------------------
If age was 20, you would not get an exception:

Example
checkAge(20);
The output will be:

Access granted - You are old enough!






